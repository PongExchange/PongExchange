"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Fs = require('fs');
var Path = require('path');

/* =============================================================================
 * 
 * Config Module
 *  
 * ========================================================================== */

var overrides = getOverrides();
if (!overrides.tier)
	overrides.tier = process.env.NODE_ENV || 'local';
var Config = getDefaults();
mergeConfig(overrides, Config);
validate();

module.exports = Config;

/* -------------------------------------------------------------------
 * Public Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Config.initialize = function * ()
{
	// this is a placeholder since nothing needs initialized, but maybe that will change
	Config.initialized = true;
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

function getDefaults ()
{
	var Config = {};

	Config.tier = overrides.tier;
	Config.initialized = false;

	// --- Web ---
	Config.web = {};
	Config.web.host = Config.tier === 'production' ? 'pongexchange.com' : 'localhost';
	Config.web.port = process.env.PORT || 3200;
	Config.web.ssl = false;
	Config.web.getAbsoluteUri = function() 
	{ 
		return (Config.web.ssl ? 'https://' : 'http://') + Config.web.host 
			+ (Config.web.port ? ':' : '') + Config.web.port;  
	};

	// --- Postgres ---
	Config.sql = {};
	Config.sql.connectionString = process.env.DATABASE_URL;
	Config.sql.testingConnection = null;

	return Config;
}

function getOverrides ()
{
	var configPath = Path.resolve(__dirname, '../../config.json');
	if (!Fs.existsSync(configPath))
		return {}; // config.json not found, so there's no overrides.

	var file = Fs.readFileSync(configPath, { encoding: 'utf8' });
	try
	{
		return JSON.parse(file);
	}
	catch (ex)
	{
		throw new Error('config.json contains invalid JSON.');
	}

}

function mergeConfig (overrides, config)
{
	if (!config || typeof config !== 'object' || !overrides || typeof overrides !== 'object')
		throw new Error('Cannot merge configs. Value was expected to be an object.');

	for (var i in overrides)
	{
		if (config.hasOwnProperty(i))
		{
			if (config[i] && typeof config[i] === 'object' && !(config[i] instanceof Array))
			{
				mergeConfig(overrides[i], config[i]);
			}
			else
			{
				config[i] = overrides[i];
			}
		}
	}
}

function validate ()
{
	switch (Config.tier)
	{
		case 'local':
		case 'development':
		case 'production':
			break;
		default:
			throw new Error('Invalid Config.tier ' + Config.tier);
	}

	if (!Config.sql.connectionString)
		throw new Error('Must provide a PostgreSQL connection string.');
}
