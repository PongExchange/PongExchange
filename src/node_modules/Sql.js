"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Config = require('Config');
var Pg = require('co-pg')(require('pg.js'));

/* =============================================================================
 * 
 * Sql
 *  
 * ========================================================================== */

var Sql = module.exports;

Sql.testingMode = false;

/* -------------------------------------------------------------------
 * Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Sql.using = function * (scope)
{
	if (Sql.testingMode)
		return yield Sql.usingTransaction(scope);
	
	return yield using(scope);
};

Sql.usingTransaction = function * (scope)
{
	return yield using(/**@param db {SqlClient} */function * (db)
	{
		yield db.query('BEGIN');
		var tran = new SqlTransaction(db);
		var error;
		var res;
		try
		{
			res = yield scope(tran);
		}
		catch (ex)
		{
			error = ex;
		}
		
		// if the transaction wasn't committed in the scope, roll it back
		if (tran.outstanding)
			yield tran.rollback();
		
		if (error)
			throw error;
		
		return res;
	});
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

function * using (scope)
{
	var results = yield Pg.connect_(Config.sql.connectionString);
	var pgClient = results[0];
	var done = results[1];

	try
	{
		var sqlClient = new SqlClient(pgClient);
		var res = yield scope(sqlClient);
		done(); // return the connection to the pool
		return res;
	}
	catch (ex)
	{
		// don't reuse this connection if there was an error.
		pgClient.end();
		throw ex;
	}
}

/* =============================================================================
 * 
 * SqlClient
 *  
 * ========================================================================== */

function SqlClient (pgClient)
{
	/** @private */
	Object.defineProperty(this, '__client', { value: pgClient });
}

/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

SqlClient.prototype.query = function * (sql, params)
{
	return yield this.__client.query_(sql, params);
};

/* =============================================================================
 * 
 * SqlClient
 *  
 * ========================================================================== */

function SqlTransaction (sqlClient)
{
	this.outstanding = true;
	this.sqlClient = sqlClient;
}

/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

SqlTransaction.prototype.commit = function * ()
{
	if (Sql.testingMode)
		return; // todo: this should probably return a mock success object
	
	var res = yield this.sqlClient.query('COMMIT');
	this.outstanding = false;
	return res;
};

SqlTransaction.prototype.query = function * (sql, params)
{
	return yield this.sqlClient.query(sql, params);
};

SqlTransaction.prototype.rollback = function * ()
{
	var res = yield this.sqlClient.query('ROLLBACK');
	this.outstanding = false;
	return res;
};
