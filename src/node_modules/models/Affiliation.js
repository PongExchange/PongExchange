"use strict";

/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

// var AffiliationStats = require('models/AffiliationStats');
var PongUtils = require('PongUtils');
var Sql = require('Sql');
var SqlBuilder = require('SqlBuilder');
var Url = require('url');

/* =============================================================================
 * 
 * Affiliation
 *
 *  
 * ========================================================================== */

module.exports = Affiliation;

var DEFAULT_ROW = 
{
  id: 0,
  name: null
};

/**
 * A ping pong player affiliation (eg, Dev, Sales, etc)
 * @param databaseRow A query result row that minimally contains the id and name column values
 * @constructor
 */
function Affiliation (databaseRow)
{
	// not all database rows will have all the columns, resulting in undefined values overwriting default nulls
	var row = databaseRow ? PongUtils.extend({}, DEFAULT_ROW, databaseRow) : DEFAULT_ROW;
	
	// database columns; 
	this.id = row.id;
	this.name = row.name;
	
}
/* -------------------------------------------------------------------
 * Getters / Setters
 * ---------------------------------------------------------------- */

Object.defineProperty(Affiliation.prototype, 'affiliationsUrl', {
	get: function () { return '/admin/affiliations'; }
});

/* -------------------------------------------------------------------
 * Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */


/**
 * Gets all affiliations in the database.
 * @return {Affiliation[]}
 */
Affiliation.getAll = function*()
{
	return yield Sql.using(function*(db)
	{
		var dbResult = yield db.query('SELECT * FROM affiliations');
		var len = dbResult.rows.length;
		var affiliations = new Array(len);
		for (var i = 0; i < len; i++)
			affiliations[i] = new Affiliation(dbResult.rows[i]);
		
		return affiliations;
	});
};

/**
 * @return {Affiliation} with parameter 'id' or null if not found
 */
Affiliation.getById = function*(id)
{
	var affiliation = null;
	if (typeof id != 'number' || id === 0) return affiliation;
	
	yield Sql.using(function*(db)
	{
		var dbResult = yield db.query('select * from affiliations where id = $1', [id]);
		if (dbResult.rowCount === 1)
		{
			affiliation = new Affiliation(dbResult.rows[0]);
		}
	});
	
	return affiliation; 
};


/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * Deletes this Affiliation from the db
 * @return {boolean} indicating if the operation was successful
 */
Affiliation.prototype.delete = function * ()
{
  
  return yield deleteAffiliation(this);
};


/**
 * Upserts this Affiliation to the db
 * @return {boolean} indicating if the operation was successful
 */
Affiliation.prototype.save = function * ()
{

	return yield this.id ? updateAffiliation(this) : insertAffiliation(this);
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

function* deleteAffiliation(a)
{
  var sql = Sql.fromComment(function ()
  {/*!
  
delete from  affiliations
where   id = @id

*/});
  
  var res = yield new SqlBuilder(sql, a).query();
  return res.rowCount === 1;
}

function* insertAffiliation(a)
{
	var sql = Sql.fromComment(function ()
	{/*!
	
insert  into affiliations
        ( name)
values  ( @name )
returning id;

*/});
	
	var res = yield new SqlBuilder(sql, a).query();
	a.id = res.rows[0].id;
	return true;
}

function* updateAffiliation(a)
{
	var sql = Sql.fromComment(function ()
	{/*!
	
update  affiliations
set     name = @name
where   id = @id

*/});
	
	var res = yield new SqlBuilder(sql, a).query();
	return res.rowCount === 1;
}