"use strict";

var Game = require('models/Game');
var Player = require('models/Player');
var PongUtils = require('PongUtils');
var Sql = require('Sql');
var SqlBuilder = require('SqlBuilder');

module.exports = Match;

/**
 * Represents a group of contiguously-played games by the same players.
 * 
 * Currently, this acts like a sequence, only providing an identifier to put on the games table.
 * 
 * @constructor
 */
function Match()
{
	// columns
	this.id = 0;
}

/* -------------------------------------------------------------------
 * Getters / Setters
 * ---------------------------------------------------------------- */

 Object.defineProperties(Match.prototype,
{
});

/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Match.prototype.addGame = function*(game)
{
	if (!game.id) throw new Error('may only add saved games');

	yield Sql.using(function*(db)
	{
		yield db.query('update games set match_id = $1 where id = $2', [this.id, game.id]);
		game.match_id = this.id;
	}.bind(this));
};

Match.prototype.getAllGames = function*()
{
	return yield Game.getAllByMatchId(this.id);
};

/**
 * returns winning team array or null if match isn't complete
 * @return {Array|null} winning team {Player} array or null if no winning team
 */
Match.prototype.getWinningTeam = function*()
{
	var games = yield this.getAllGames();

	if (games.length === 1) return null;

	var t1 = games[0].team1,
		t2 = games[0].team2;

	var t1Wins = games.filter(function (game) { return Player.isSameTeam(t1, game.team1) }).length,
		t2Wins = games.filter(function (game) { return Player.isSameTeam(t2, game.team1) }).length;

	return t1Wins === t2Wins ? null : t1Wins > t2Wins ? t1 : t2;
};

/**
 * returns true if this match consists of an odd number of games
 * @return {boolean}
 */
Match.prototype.isComplete = function*()
{
	var winningTeam = yield this.getWinningTeam();
	return winningTeam != null; 
};


/* -------------------------------------------------------------------
 * Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * Returns a newly persisted {Match} whose id can be set on a {Game}'s matchId.
 */
Match.newMatch = function*()
{
	var m = new Match();
	
	yield Sql.using(function*(db)
	{
		var query = yield db.query('insert into matches values(default) returning id;');
		m.id = query.rows[0].id;
	});
	
	return m;
};