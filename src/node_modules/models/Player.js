"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Sql = require('Sql');

/* =============================================================================
 * 
 * Session
 *  
 * ========================================================================== */

module.exports = Player;

var DEFAULT_ROW = {
	id: 0,
	name: null,
	email: null,
	affiliation: null,
	rating: 0,
	google_id: null,
	google_profile: null
};

function Player (row)
{
	if (!row)
		row = DEFAULT_ROW;
	
	this.id = row.id;
	this.name = row.name;
	this.email = row.email;
	this.affiliation = row.affiliation;
	this.rating = row.rating;
	this.googleId = row.google_id;
	this.googleProfile = row.google_profile;
}

/* -------------------------------------------------------------------
 * Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * 
 * @param profile The profile object we get from the google API.
 * @return {Player}
 */
Player.fromGoogle = function * (profile)
{
	var p = new Player();
	p.name = profile.displayName;
	p.email = profile.emails[0].value; // todo: might want to look through more than just the first email
	p.googleId = profile.id;
	p.googleProfile = profile;
	
	var existingPlayer = yield Sql.using(function * (db)
	{
		// check if this user already exists
		var res = yield db.query('select * from players where google_id = $1 or email = $2;', [ p.googleId, p.email ]);
		if (res.rows.length === 0)
			return null;
		
		// we got some sort of match
		var row;
		for (var i = 0; i < res.rows.length; i++)
		{
			row = res.rows[i];
			if (p.googleId === row.google_id)
			{
				// looks like this player already exists, just return it
				return new Player(row);
			}
		}

		// must be an email match - let's add a google profile ID to the existing player
		var ep = new Player(res.rows[0]);
		if (!ep.googleId)
		{
			ep.googleId = p.googleId;
			ep.googleProfile = p.googleProfile;
			yield ep.save();

			return ep;
		}
	});
	
	if (existingPlayer)
		return existingPlayer;
	
	yield p.save();
	return p;
};

/**
 * Gets all players in the database.
 * @return {Player[]}
 */
Player.getAll = function*()
{
	return yield Sql.using(function*(db)
	{
		var dbResult = yield db.query('SELECT id,name FROM players ORDER BY name');
		var len = dbResult.rows.length;
		var players = new Array(len);
		for (var i = 0; i < len; i++)
			players[i] = new Player(dbResult.rows[i]);
		
		return players;
	});
};

/*
	returns the player with parameter 'id' or null if not found
 */
Player.getById = function*(id)
{
	var player = null;
	if (typeof id != 'number' || id <= 0) return player;
	
	yield Sql.using(function*(db)
	{
		var dbResult = yield db.query('select * from players where id = $1', [id]);
		if (dbResult.rowCount === 1)
		{
			player = new Player(dbResult.rows[0]);
		}
	});
	
	return player; 
};

Player.getByEmail = function*(email)
{
	var player = null;
	if (typeof email != 'string' || email.length == 0) return player;
	
	yield Sql.using(function*(db)
	{
		var dbResult = yield db.query('select * from players where email = $1', [email.toLowerCase()]);
		
		// TODO: make unique constraint on email
		if (dbResult.rowCount === 1)
		{
			player = new Player(dbResult.rows[0]);
		}
	});
	
	return player;
};

/*
	returns the id of the newly-inserted parameter 'player'; returns 0 if the insert failed
 */
Player.insert = function*(player)
{
	var result = 0;
	if (!player || (!player.name && !player.email)) return result;
	
	// emails should always be lower-cased, localization be damned for now
	if (player.email)
	{
		player.email = player.email.toLowerCase();
	}
	
	if (!player.name)
	{
		player.name = player.email;
	}
	
	yield Sql.using(function* (db) 
	{
		var dbResult = yield db.query(
			'insert into players (name, email, rating) values ($1, $2, $3) returning id;',
			[player.name, player.email, player.rating || 0]);
		
		if (dbResult.rowCount === 1)
		{
			result = dbResult.rows[0].id;
		}
	});
	
	return result;
};

/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Player.prototype.save = function * ()
{
	return yield Sql.using(/**@param db {SqlClient}*/function * (db)
	{
		var sql, res;
		var params = [ this.name, this.email, this.affiliation, this.rating, this.googleId, this.googleProfile ];
		if (!this.id)
		{
			// insert
			sql = 'insert into players (name, email, affiliation, rating, google_id, google_profile) values ($1, $2, $3, $4, $5, $6) returning id;';
			res = yield db.query(sql, params);
			this.id = res.rows[0].id;
			return true;
		}
		
		// update
		sql = 'update players set name=$1, email=$2, affiliation=$3, rating=$4, google_id=$5, google_profile=$6 where id = $7';
		params.push(this.id);
		res = yield db.query(sql, params);
		return res.rowCount === 1;
		
	}.bind(this));
};
