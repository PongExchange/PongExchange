"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Sql = require('Sql');

/* =============================================================================
 * 
 * PlayerStats - contains basic win/loss/games played information for a Player
 *  
 * ========================================================================== */

module.exports = PlayerStats;

var DEFAULT_ROW = 
{
	singles_games_played: 0,
	singles_games_won: 0,
	doubles_games_played: 0,
	doubles_games_won: 0
};

/**
 * 
 * @param row A row obtained from running {@link getSql}
 * @constructor
 */
function PlayerStats(row)
{
	if (!row) row = DEFAULT_ROW;
	
	this.singlesGamesPlayed = row.singles_games_played;
	this.singlesGamesWon = row.singles_games_won;
	this.doublesGamesPlayed = row.doubles_games_played;
	this.doublesGamesWon = row.doubles_games_won;
}

/* -------------------------------------------------------------------
 * Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * @return {Object} with its keys as {@link Player#id} and values as {@link PlayerStats}.
 */
PlayerStats.getAllKeyedByPlayerId = function*()
{
	var result = {};
	
	yield Sql.using(function*(db)
	{
		var dbResult = yield db.query(getSql());
		
		for (var i = 0; i < dbResult.rowCount; i++)
		{
			var row = dbResult.rows[i];
			result[row.player_id] = new PlayerStats(row);
		}
	});
	
	return result;
};

/**
 * Gets played/win stats for a single player
 * @param playerId
 * @return {PlayerStats}
 */
PlayerStats.getForPlayerId = function*(playerId)
{
	if (typeof playerId != 'number') throw new Error('playerId must be a number');
	if (playerId === 0) return new PlayerStats();
	
	return yield Sql.using(function*(db)
	{
		var query = yield db.query(getSql(playerId), [playerId]);
		return new PlayerStats(query.rowCount ? query.rows[0] : null);
	});
};



/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */



/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * main aggregate sql query for either a single player or all players
 * @param optionalPlayerId
 * @return {string}
 */
var getSql = function(optionalPlayerId)
{
	var sql = Sql.fromComment(function() 
	{/*!
	
select
	p.id as player_id,
	cast(sum(case when g.game_type_id = 1 then 1 else 0 end) as integer) as singles_games_played,
	cast(sum(case when g.game_type_id = 1 and gp.is_winner = true then 1 else 0 end) as integer) as singles_games_won,
	cast(sum(case when g.game_type_id = 2 then 1 else 0 end) as integer) as doubles_games_played,
	cast(sum(case when g.game_type_id = 2 and gp.is_winner = true then 1 else 0 end) as integer) as doubles_games_won
from
	players p
	inner join games_players gp on p.id = gp.player_id
	inner join games g on g.id = gp.game_id
--where
group by
	p.id
	
	*/});
	
	if (optionalPlayerId)
	{
		sql = sql.replace('--where', 'where p.id = $1');
	}
	
	return sql;
};