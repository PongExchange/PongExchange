"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Crypto = require('crypto');
var Sql = require('Sql');
var thunkify = require('thunkify');

var randomBytes = thunkify(Crypto.randomBytes);

/* =============================================================================
 * 
 * Session
 *  
 * ========================================================================== */

module.exports = Session;

var DEFAULT_ROW = {
	token: null,
	player_id: 0,
	created_date: null,
	last_activity_date: null
};

function Session (row)
{
	if (!row)
		row = DEFAULT_ROW;
	
	this.token = row.token;
	this.playerId = row.player_id;
	this.createdDate = row.created_date;
	this.lastActivityDate = row.last_activity_date;
}

/* -------------------------------------------------------------------
 * Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * Creates a new session for a player.
 * @param player {Player}
 * @return {Session}
 */
Session.fromPlayer = function * (player)
{
	var s = new Session();
	s.playerId = player.id;
	yield s.save();
	
	return s;
};

Session.getByToken = function * (token)
{
	return yield Sql.using(/**@param db {SqlClient}*/function * (db)
	{
		var res = yield db.query('select * from sessions where token = $1;', [ token ]);
		if (res.rowCount > 0)
			return new Session(res.rows[0]);
		
		return null;
	});
};

/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Session.prototype.delete = function * ()
{
	return yield Sql.using(function * (db)
	{
		var res = yield db.query('delete from sessions where token = $1;', [ this.token ]);
		return res.rowCount === 1;
			
	}.bind(this));
};

Session.prototype.extend = function * ()
{
	// update the last activity date if it was more than an hour ago
	if (Date.now() - this.lastActivityDate > 1000 * 60 * 60)
		yield this.save();
};

Session.prototype.save = function * ()
{
	return yield Sql.using(/**@param db {SqlClient}*/function * (db)
	{
		var sql, params;
		if (this.token === null) // insert
		{
			// generate new token
			var bytes = yield randomBytes(32);
			this.token = bytes.toString('hex');
			
			// set dates
			this.createdDate = new Date();
			this.lastActivityDate = this.createdDate;

			// save
			sql = 'insert into sessions (token, player_id, created_date, last_activity_date) values ($1, $2, $3, $4);';
			params = [ this.token, this.playerId, this.createdDate, this.lastActivityDate ];
		}
		else // update
		{
			this.lastActivityDate = new Date();
			sql = 'update sessions set last_activity_date = $1 where token = $2;';
			params = [ this.lastActivityDate, this.token ];
		}
		
		var res = yield db.query(sql, params);
		return res.rowCount === 1
		
	}.bind(this));
};
