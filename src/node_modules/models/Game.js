"use strict";

var Sql = require('Sql');

var Game = module.exports;

Game.types = 
{
	singles: 1,
	doubles: 2
};

/*
	returns an object with game and player information for the parameter game 'id'
 */
Game.getById = function*(id)
{
	var result = null;
	if (typeof id != 'number' || id <= 0) return result;
	
	yield Sql.using(function*(db) 
	{
		var dbResult = yield db.query(queries.completeGame + ' where g.id = $1', [id]);
		
		if (dbResult.rowCount > 0)
		{
			result = transformFromCompleteGameQuery(dbResult.rows);
		}
	});
	
	return result;
};

/*
	inserts either a singles or doubles game, depending on how many players are passed
	returns the new game.id when successful or throws an exception
 */
Game.insert = function*(team1IdsArray, team1Score, team2IdsArray, team2Score)
{
	if (!Array.isArray(team1IdsArray) 
		|| !Array.isArray(team2IdsArray) 
		|| team2IdsArray.length != team2IdsArray.length) 
		throw new Error('insert requires two same-sized arrays of player ids');
	
	var gameId = 0, 
		gameType;
	
	switch (team1IdsArray.length)
	{
		case 1: gameType = Game.types.singles; break;
		case 2: gameType = Game.types.doubles; break;
		default: throw new Error('unknown number of players on team');
	}
	
	yield Sql.using(function*(db)
	{
		// first insert the games row, then the games_players
		var dbResult = yield db.query(
			"insert into games (played_date, game_type_id) values (now() at time zone 'utc', $1) returning id;",
			[gameType]);
		
		gameId = dbResult.rows[0].id;
		
		if (gameId > 0)
		{
			yield insertGamesPlayers(db, gameId, team1IdsArray, team1Score, team2Score);
			yield insertGamesPlayers(db, gameId, team2IdsArray, team2Score, team1Score);
		}
	});
	
	return gameId;
};

function* insertGamesPlayers(db, gameId, teamIdsArray, teamScore, otherTeamScore)
{
	for (var i = 0; i < teamIdsArray.length; i++)
	{
		yield db.query(
			'insert into games_players (game_id, player_id, is_winner, score) ' +
			'values ($1, $2, $3, $4);', [gameId, teamIdsArray[i], teamScore > otherTeamScore, teamScore]);
	}
}

function transformFromCompleteGameQuery(rows)
{
	var g = 
	{
		id: rows[0].game_id,
		played_date: rows[0].played_date,
		game_type_id: rows.length / 2, // should map to Game.types
		team1: [],
		team2: []
	};
	
	for (var i = 0; i < rows.length; i++)
	{
		var r = rows[i];
		var p = 
		{
			id: r.player_id,
			name: r.name,
			email: r.email
		};

		// let's make the winner always be team 1
		if (r.is_winner) 
		{ 
			g.team1.push(p);
			g.team1Score = r.score;
		}
		else
		{	
			g.team2.push(p);
			g.team2Score = r.score;
		}
	}
	
	return g;
}

var queries = 
{
	completeGame: Sql.fromComment(function ()
	{/*!
	
select g.id as game_id
     , g.played_date
     , p.id as player_id
     , p.name
     , p.email
     , gp.is_winner
     , gp.score
from games g 
inner join games_players gp on g.id = gp.game_id 
inner join players p on p.id = gp.player_id 

*/})
		
};