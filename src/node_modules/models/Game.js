"use strict";

var Player = require('models/Player');
var Sql = require('Sql');

/* =============================================================================
 * 
 * Game
 *  
 * ========================================================================== */

module.exports = Game;

/**
 * A singles or doubles game, by default played to 11 (win by 2).
 * @constructor
 */
function Game()
{
	this.id = 0;
	
	this.played_date = new Date();
	this.game_type_id = Game.types.singles;

	this.team1 = [];
	this.team1Score = 0;

	this.team2 = [];
	this.team2Score = 0;

	this.recorded_by_player_id = 0;
}

Game.types =
{
	singles: 1,
	doubles: 2
};


/* -------------------------------------------------------------------
 * Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * @return {Game} with game and player information for the parameter game 'id'
 */
Game.getById = function*(id)
{
	var result = null;
	if (typeof id != 'number' || id <= 0) return result;
	
	yield Sql.using(function*(db) 
	{
		var dbResult = yield db.query(queries.completeGame + ' where g.id = $1', [id]);
		
		if (dbResult.rowCount > 0)
		{
			result = fromCompleteGameQuery(dbResult.rows);
		}
	});
	
	return result;
};


/* -------------------------------------------------------------------
 * Prototype Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * returns true if this Game's state is valid for persistence
 * @return {boolean}
 */
Game.prototype.canBeSaved = function ()
{
	return !this.isSaved()
		&& Array.isArray(this.team1)
		&& Array.isArray(this.team2)
		&& (this.team1.length === Game.types.singles || this.team1.length === Game.types.doubles)
		&& this.team1.length === this.team2.length
		&& ((12 > this.team1Score > 0) && (12 > this.team2Score > 0))
		&& this.team1Score !== this.team2Score
		&& !(this.team1[0].id === this.team2[0].id)
		&& (this.team1.length === 1 || !(this.team1[0].id === this.team2[1].id))
		&& (this.team1.length === 1 || !(this.team1[1].id === this.team2[0].id))
		&& (this.team1.length === 1 || !(this.team1[1].id === this.team2[1].id));
};

Game.prototype.isSaved = function ()
{
	return this.id > 0;
};

Game.prototype.isDoublesGame = function ()
{
	return this.game_type_id === Game.types.doubles;
};

Game.prototype.isSinglesGame = function ()
{
	return this.game_type_id === Game.types.singles;
};

/**
 *
 */
Game.prototype.save = function*()
{
	if (!this.canBeSaved())
	{
		throw new Error('unable to be saved');
	}

	this.game_type_id = this.team1.length;

	// team1 always wins
	if (this.team1Score < this.team2Score)
	{
		var swap = this.team2Score;
		this.team2Score = this.team1Score;
		this.team1Score = swap;

		swap = this.team2;
		this.team2 = this.team1;
		this.team1 = swap;
	}

	yield insertGame(this);
};


/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

function fromCompleteGameQuery (rows)
{
	var g = new Game();
	for (var i = 0; i < rows.length; i++)
	{
		var r = rows[i];
		if (i == 0)
		{
			g.id = r.game_id;
			g.played_date = r.played_date;
			g.game_type_id = rows.length / 2;
		}
		var p = new Player(r);

		// let's make the winner always be team 1
		if (r.is_winner)
		{
			g.team1.push(p);
			g.team1Score = r.score;
		}
		else
		{
			g.team2.push(p);
			g.team2Score = r.score;
		}
	}
	return g;
}

function* insertGame(game)
{
	yield Sql.using(function*(db)
	{
		// first insert the games row, then the games_players
		var dbResult = yield db.query(
			"insert into games (played_date, game_type_id, recorded_by_player_id) values ($1, $2, $3) returning id;",
			[game.played_date, game.game_type_id, game.recorded_by_player_id]);

		game.id = dbResult.rows[0].id;

		if (game.isSaved())
		{
			yield insertGamesPlayers(db, game, 1);
			yield insertGamesPlayers(db, game, 2);
		}
	});
}

function* insertGamesPlayers(db, game, teamNumber)
{
	var teams = game['team' + teamNumber],
		teamScore = game['team' + teamNumber + 'Score'],
		isWinner = teamNumber == 1;
	
	for (var i = 0; i < teams.length; i++)
	{
		yield db.query(
			'insert into games_players (game_id, player_id, is_winner, score) ' +
			'values ($1, $2, $3, $4);', [game.id, teams[i].id, isWinner, teamScore]);
	}
}

var queries = 
{
	completeGame: Sql.fromComment(function ()
	{/*!
	
select g.id as game_id
     , g.played_date
     , p.id as player_id
     , p.name as player_name
     , p.email as player_email
     , gp.is_winner
     , gp.score
from games g 
inner join games_players gp on g.id = gp.game_id 
inner join players p on p.id = gp.player_id 

*/})
		
};